kind: Deployment
apiVersion: apps/v1
metadata:
  name: app-center
  namespace: {{ .Release.Namespace }}
  labels:
    app: app-center
    app.kubernetes.io/name: {{ .Values.app.kubernetes.io.name }}
    app.kubernetes.io/version: v1
    version: v1
  annotations:
    deployment.kubernetes.io/revision: '2'
    servicemesh.kubesphere.io/enabled: 'false'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-center
      app.kubernetes.io/name: {{ .Values.app.kubernetes.io.name }}
      app.kubernetes.io/version: v1
      version: v1
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: app-center
        app.kubernetes.io/name: {{ .Values.app.kubernetes.io.name }}
        app.kubernetes.io/version: v1
        version: v1
      annotations:
        kubesphere.io/containerSecrets: '{"container":"docker-registry"}'
        logging.kubesphere.io/logsidecar-config: '{}'
        sidecar.istio.io/inject: 'false'
    spec:
      volumes:
        - name: volume
          configMap:
            name: app-center
            defaultMode: 420
        - name: chaos
          emptyDir: {}
      containers:
        - name: chaos
          image: '{{ .Values.image.repo }}/chaos:{{ .Values.image.tag }}'
          ports:
            - name: chaos
              containerPort: 6666
              protocol: TCP
          resources: {}
          volumeMounts:
            - name: volume
              readOnly: true
              mountPath: /configs
            - name: chaos
              mountPath: /cache
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: container
          image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
          ports:
            - name: app-center
              containerPort: 80
              protocol: TCP
          resources: {}
          volumeMounts:
            - name: volume
              readOnly: true
              mountPath: /configs
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: default
      serviceAccount: default
      securityContext: {}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      affinity: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600