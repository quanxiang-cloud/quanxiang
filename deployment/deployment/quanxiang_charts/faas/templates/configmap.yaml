kind: ConfigMap
apiVersion: v1
metadata:
  name: faas
  namespace: {{ .Values.namespace }}
data:
  config.yml: |+
    # port 端口
    # e.g :80
    port: :8081

    # model 模式 debug|release
    # debug模式，可以输出更加详细的日志，但是运行速度会减慢
    model: debug

    #  -------------------- log --------------------
    # comply with zap log specification
    log:
      level: -1
      development: false
      sampling:
        initial: 100
        thereafter: 100
      outputPath:
        - stderr
      errorOutputPath:
        - stderr

    #  -------------------- internalNet --------------------
    internalNet:
      timeout: 20
      maxIdleConns: 10

    # -------------------- mysql --------------------  
    mysql:
      db: faas
      host: {{ .Values.config.mysql.host }}
      user: {{ .Values.config.mysql.user }}
      password: {{ .Values.config.mysql.password }}
      log: {{ .Values.config.mysql.log }}


    # ------------------------ k8s --------------------
    k8s:
      namespace: builder

    docker:
      namespace: faas
      builder: builder
      serving: serving


    # ---------- redis ----------
    redis:
      {{- with .Values.config.redis.addrs }}
      addrs:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      username: {{ .Values.config.redis.username }}
      password: {{ .Values.config.redis.password }}

    # -------------------- elastic --------------------
    elastic:
      {{- with .Values.config.elastic.host }}
      host:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      log: {{ .Values.config.elastic.log }}
    # ---------- graph ----------
    graph:
      runs:
        - step-source-default
        - step-prepare
        - step-create
        - step-results
      steps:
        -
          - step-source-default
        -
          - step-prepare
        -
          - step-create
        -
          - step-results
          
    build-images:
      go1.16: qxcr.xyz/faas/builder-go:v1alpha1.0.1

    templates: 
    - full_name: handle.go
      branch: master
      commit: init repo
      content: |
        package handle

        import (
          "fmt"
          "net/http"

          "{{ .Values.golangImport }}"
        )

        type Request struct {
          Foo string
        }

        type Response struct {
          Bar string
        }

        // Handler function as a server handler
        // @tags handler
        // @Summary TODO: write your function name
        // @Description handler description
        // @Produce json
        // @Param request body Request true "request"
        // @Success 200 {object} Response
        // @Router / [post]
        func Handle(w http.ResponseWriter, r *http.Request) {
          ctx := r.Context()
          _, ok := ctx.Value({{.}}.LOWCODE).(lowcode.Lowcode)
          if !ok {
            fmt.Printf("error")
            return
          }

          // code there
          w.Write([]byte("hello faas!"))
        }

    - full_name: go.mod
      branch: master
      commit: init repo
      content: |
        module quanxiang.lowcode/faas

        go 1.16

        require github.com/quanxiang-cloud/faas-lowcode-interface v0.0.0-20220505034554-fae42a4892ad

    - full_name: go.sum
      branch: master
      commit: init repo
      content: |
        github.com/quanxiang-cloud/faas-lowcode-interface v0.0.0-20220505034554-fae42a4892ad h1:ynmSpZkZf8oGV6EhEXfiQY5Wy9lrTJxBw/g6WH8KlZw=
        github.com/quanxiang-cloud/faas-lowcode-interface v0.0.0-20220505034554-fae42a4892ad/go.mod h1:rwhMXhcV96F1l+frwbgqazzepMTwRC1f0HaFEPNHscQ=

    - full_name: info.faas
      branch: master
      commit: init repo
      content: |
        projectName: demo
        language: go
        version: 1.16

